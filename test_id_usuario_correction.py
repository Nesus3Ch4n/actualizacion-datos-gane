#!/usr/bin/env python3
"""
Script para verificar que las relaciones por id_usuario funcionan correctamente
"""

import requests
import json
import time

# Configuraci√≥n
BASE_URL = "http://localhost:8080"
API_URL = f"{BASE_URL}/api"

def test_id_usuario_relationships():
    """Probar que todas las relaciones usen id_usuario correctamente"""
    
    print("üîç PRUEBA DE RELACIONES POR ID_USUARIO")
    print("=" * 60)
    
    # Paso 1: Verificar conexi√≥n con el backend
    print("\n1Ô∏è‚É£ Verificando conexi√≥n con el backend...")
    try:
        response = requests.get(f"{API_URL}/auth/health")
        if response.status_code == 200:
            print("‚úÖ Backend conectado correctamente")
        else:
            print(f"‚ùå Backend respondi√≥ con status: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå Error conectando al backend: {e}")
        return
    
    # Paso 2: Obtener token de prueba
    print("\n2Ô∏è‚É£ Obteniendo token de prueba...")
    try:
        response = requests.get(f"{API_URL}/auth/generate-test-token")
        if response.status_code == 200:
            token_data = response.json()
            token = token_data.get('token')
            print(f"‚úÖ Token obtenido: {token[:50]}...")
        else:
            print(f"‚ùå Error obteniendo token: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå Error obteniendo token: {e}")
        return
    
    # Paso 3: Verificar usuarios existentes
    print("\n3Ô∏è‚É£ Verificando usuarios existentes...")
    try:
        response = requests.get(f"{API_URL}/usuarios")
        if response.status_code == 200:
            usuarios_data = response.json()
            usuarios = usuarios_data.get('data', [])
            print(f"‚úÖ Usuarios encontrados: {len(usuarios)}")
            for usuario in usuarios:
                print(f"   - ID: {usuario.get('idUsuario')}, Nombre: {usuario.get('nombre')}, C√©dula: {usuario.get('documento')}")
        else:
            print(f"‚ùå Error obteniendo usuarios: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå Error obteniendo usuarios: {e}")
        return
    
    if not usuarios:
        print("‚ö†Ô∏è No hay usuarios para probar")
        return
    
    # Usar el primer usuario para las pruebas
    usuario_test = usuarios[0]
    usuario_id = usuario_test.get('idUsuario')
    cedula_test = str(usuario_test.get('documento'))
    
    print(f"\nüéØ Usando usuario para pruebas:")
    print(f"   - ID: {usuario_id}")
    print(f"   - C√©dula: {cedula_test}")
    print(f"   - Nombre: {usuario_test.get('nombre')}")
    
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}'
    }
    
    # Paso 4: Probar guardado de estudio acad√©mico con id_usuario
    print("\n4Ô∏è‚É£ Probando guardado de estudio acad√©mico...")
    
    estudio_data = {
        # Remover idUsuario del cuerpo, se enviar√° como par√°metro
        "nivelAcademico": "Pregrado",
        "programa": "Ingenier√≠a de Sistemas",
        "institucion": "Universidad de Prueba",
        "semestre": 8,
        "graduacion": "2024-12-15"
    }
    
    try:
        response = requests.post(
            f"{API_URL}/formulario/estudios/guardar?idUsuario={usuario_id}",
            json=[estudio_data],  # Enviar como array
            headers=headers
        )
        
        print(f"üì• Respuesta del estudio acad√©mico:")
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            response_data = response.json()
            print(f"‚úÖ Estudio acad√©mico guardado exitosamente: {json.dumps(response_data, indent=2)}")
        else:
            print(f"‚ùå Error guardando estudio acad√©mico:")
            try:
                error_data = response.json()
                print(f"Error: {json.dumps(error_data, indent=2)}")
            except:
                print(f"Error: {response.text}")
                
    except Exception as e:
        print(f"‚ùå Error en la petici√≥n de estudio acad√©mico: {e}")
    
    # Paso 5: Probar guardado de veh√≠culo con id_usuario
    print("\n5Ô∏è‚É£ Probando guardado de veh√≠culo...")
    
    vehiculo_data = {
        # Remover idUsuario del cuerpo, se enviar√° como par√°metro
        "tipoVehiculo": "Autom√≥vil",
        "marca": "Toyota",
        "modelo": "Corolla",
        "anio": 2020,
        "placa": "ABC123",
        "color": "Blanco"
    }
    
    try:
        response = requests.post(
            f"{API_URL}/formulario/vehiculos/guardar?idUsuario={usuario_id}",
            json=[vehiculo_data],  # Enviar como array
            headers=headers
        )
        
        print(f"üì• Respuesta del veh√≠culo:")
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            response_data = response.json()
            print(f"‚úÖ Veh√≠culo guardado exitosamente: {json.dumps(response_data, indent=2)}")
        else:
            print(f"‚ùå Error guardando veh√≠culo:")
            try:
                error_data = response.json()
                print(f"Error: {json.dumps(error_data, indent=2)}")
            except:
                print(f"Error: {response.text}")
                
    except Exception as e:
        print(f"‚ùå Error en la petici√≥n de veh√≠culo: {e}")
    
    # Paso 6: Verificar auditor√≠a para confirmar que se registra con id_usuario
    print("\n6Ô∏è‚É£ Verificando auditor√≠a...")
    time.sleep(2)  # Esperar un poco para que se registre la auditor√≠a
    
    try:
        response = requests.get(f"{API_URL}/auditoria", headers=headers)
        if response.status_code == 200:
            auditoria_data = response.json()
            print(f"‚úÖ Auditor√≠a obtenida: {len(auditoria_data)} registros")
            
            # Mostrar los √∫ltimos 3 registros de auditor√≠a
            registros_recientes = auditoria_data[-3:] if len(auditoria_data) >= 3 else auditoria_data
            for registro in registros_recientes:
                print(f"   - {registro.get('fechaModificacion')}: {registro.get('descripcion')} (Usuario ID: {registro.get('idUsuario')})")
        else:
            print(f"‚ùå Error obteniendo auditor√≠a: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error obteniendo auditor√≠a: {e}")
    
    print("\n" + "=" * 60)
    print("‚úÖ PRUEBA DE ID_USUARIO FINALIZADA")
    print("=" * 60)

if __name__ == "__main__":
    test_id_usuario_relationships() 